/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MapService_TYPES_H
#define MapService_TYPES_H

#include <Thrift.h>
#include <TApplicationException.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace around7 { namespace mapservice {

typedef struct _TCell__isset {
  _TCell__isset() : lat1(false), lng1(false), lat2(false), lng2(false), height(false), width(false) {}
  bool lat1;
  bool lng1;
  bool lat2;
  bool lng2;
  bool height;
  bool width;
} _TCell__isset;

class TCell {
 public:

  static const char* ascii_fingerprint; // = "7DEF99DDE8C8A4B4BB31D32877DC6434";
  static const uint8_t binary_fingerprint[16]; // = {0x7D,0xEF,0x99,0xDD,0xE8,0xC8,0xA4,0xB4,0xBB,0x31,0xD3,0x28,0x77,0xDC,0x64,0x34};

  TCell() : lat1(0), lng1(0), lat2(0), lng2(0), height(0), width(0) {
  }

  virtual ~TCell() throw() {}

  double lat1;
  double lng1;
  double lat2;
  double lng2;
  double height;
  double width;

  _TCell__isset __isset;

  void __set_lat1(const double val) {
    lat1 = val;
  }

  void __set_lng1(const double val) {
    lng1 = val;
  }

  void __set_lat2(const double val) {
    lat2 = val;
  }

  void __set_lng2(const double val) {
    lng2 = val;
  }

  void __set_height(const double val) {
    height = val;
  }

  void __set_width(const double val) {
    width = val;
  }

  bool operator == (const TCell & rhs) const
  {
    if (!(lat1 == rhs.lat1))
      return false;
    if (!(lng1 == rhs.lng1))
      return false;
    if (!(lat2 == rhs.lat2))
      return false;
    if (!(lng2 == rhs.lng2))
      return false;
    if (!(height == rhs.height))
      return false;
    if (!(width == rhs.width))
      return false;
    return true;
  }
  bool operator != (const TCell &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TCell & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

}} // namespace

#endif
